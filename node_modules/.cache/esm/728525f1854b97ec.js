let Joi,CustomErrorHandler,User,bcrypt,hash,JWT;_854‍.x([["default",()=>_854‍.o]]);_854‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_854‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_854‍.w("../../model/authmodle/user",[["default",["User"],function(v){User=v}]]);_854‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}],["hash",["hash"],function(v){hash=v}]]);_854‍.w("../../services/Jwt",[["default",["JWT"],function(v){JWT=v}]]);





const registerSchema = {
  async register(req, res, next) {
    const { name, email, password } = req.body;

    const RegisterSchema = Joi.object({
      name: Joi.string().required(),
      email: Joi.string().email().required(),
      password: Joi.string(),
    });

    const { error } = RegisterSchema.validate(req.body);
    if (error) {
      return next(error);
    }

    ///------check database user already exsit.-----------------------

    try {
      const exist = await User.exists({ email: email });

      if (exist) {
        return next(Error("User Already Exist."));
      }
    } catch (err) {
      return next(err);
    }

    //--------hashed password-----------

    const hashedPassword = await bcrypt.hash(password, 10);

    //==========modle save in a badabase--------------------

    const user = new User({
      name,
      email,
      password: hashedPassword,
    });
    let AccessToken;
    try {
      const result = await user.save();
      AccessToken = JWT.sign({ _id: result._id });
    } catch (err) {
      return next(err);
    }

    return res.json(user);
  },
};

_854‍.d(registerSchema);
